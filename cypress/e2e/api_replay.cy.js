describe("API Replay Test - Register", () => {
  it("should replay register API 10 times with different emails", () => {
    // üî∏ ‡∏£‡∏≠ 30 ‡∏ß‡∏¥ (API ‡∏à‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏Å‡∏≥‡∏´‡∏ô‡∏î)
    cy.wait(31000);

    // üî∏ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° email 10 ‡∏ï‡∏±‡∏ß
    const emails = Array.from({ length: 10 }, (_, i) => `testuser${i + 1}@mail.com`);

    // üî∏ ‡πÇ‡∏´‡∏•‡∏î request template ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢ intercept ‡πÑ‡∏î‡πâ
    cy.fixture("intercepted_register.json").then((apiData) => {
      const registerRequest = apiData[0]; // ‡πÉ‡∏ä‡πâ request ‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô template

      emails.forEach((email, index) => {
        const body = { ...registerRequest.requestBody, email };

        cy.request({
          method: registerRequest.method,
          url: registerRequest.url,
          body,
          failOnStatusCode: false, // ‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏°‡πâ‡πÄ‡∏à‡∏≠ error (‡πÄ‡∏ä‡πà‡∏ô email ‡∏ã‡πâ‡∏≥)
        }).then((res) => {
          const result = {
            round: index + 1,
            email,
            status: res.status,
            body: res.body,
          };

          // ‚úÖ log ‡∏≠‡∏≠‡∏Å console ‡∏Ç‡∏≠‡∏á Cypress
          cy.log(`Round ${index + 1}: Status ${res.status}`);
          cy.log(`Response: ${JSON.stringify(res.body, null, 2)}`);

          // ‚úÖ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå JSON ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
          cy.writeFile(
            `cypress/results/api-replay-round-${index + 1}.json`,
            result,
            { flag: "w" } // overwrite file
          );
        });
      });
    });
  });
});
